<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.khw.studnet_grade.mapper.extend.StudentScoreMapper" >
    <resultMap id="BaseResultMap" type="com.khw.studnet_grade.entity.pojo.StudentScore" >
        <id column="sno" property="sno" jdbcType="INTEGER" />
        <result column="sname" property="sname" jdbcType="VARCHAR" />
        <collection property="courses" resultMap="CourseResultMap"/>
    </resultMap>
    <resultMap id="CourseResultMap" type="com.khw.studnet_grade.entity.Course">
        <id column="cno" property="cno" jdbcType="INTEGER" />
        <result column="cname" property="cname" jdbcType="VARCHAR" />
    </resultMap>

    <resultMap id="BaseResultMaps" type="com.khw.studnet_grade.entity.pojo.Courses" >
        <id column="cno" property="cno" jdbcType="INTEGER" />
        <result column="cname" property="cname" jdbcType="VARCHAR" />
        <result column="tno" property="tno" jdbcType="INTEGER" />
        <result column="tname" property="tname" jdbcType="VARCHAR" />
    </resultMap>

    <resultMap id="sso" type="com.khw.studnet_grade.entity.pojo.TeacherStudent">
        <id column="tno" property="tno" jdbcType="INTEGER" />
        <result column="tname" property="tname" jdbcType="VARCHAR" />
        <collection property="students" resultMap="hhh"/>
    </resultMap>
    <resultMap id="hhh" type="com.khw.studnet_grade.entity.Student" >
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Fri Dec 11 13:59:43 CST 2020.
        -->
        <id column="sno" property="sno" jdbcType="INTEGER" />
        <result column="sname" property="sname" jdbcType="VARCHAR" />
        <result column="sage" property="sage" jdbcType="VARCHAR" />
        <result column="phone" property="phone" jdbcType="VARCHAR" />
    </resultMap>
    <resultMap id="cour" type="com.khw.studnet_grade.entity.Course" >
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Mon Dec 28 13:57:40 CST 2020.
        -->
        <id column="cno" property="cno" jdbcType="INTEGER" />
        <result column="cname" property="cname" jdbcType="VARCHAR" />
    </resultMap>
    <resultMap id="scor" type="com.khw.studnet_grade.entity.Score" >
        <!--
          WARNING - @mbggenerated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Mon Dec 28 18:02:15 CST 2020.
        -->
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="sno" property="sno" jdbcType="INTEGER" />
        <result column="cno" property="cno" jdbcType="INTEGER" />
        <result column="score" property="score" jdbcType="VARCHAR" />
        <result column="tno" property="tno" jdbcType="INTEGER" />
    </resultMap>
    <resultMap id="cst" type="com.khw.studnet_grade.entity.pojo.CourseScoresTeacher">
        <result column="cname" property="cname" jdbcType="VARCHAR" />
        <result column="score" property="score" jdbcType="VARCHAR" />
        <result column="tname" property="tname" jdbcType="VARCHAR" />
    </resultMap>
    <resultMap id="AllStudent" type="com.khw.studnet_grade.entity.pojo.StudentAll">
        <result column="sno" property="sno" javaType="INTEGER"/>
        <result column="sname" property="sname" jdbcType="VARCHAR"/>
        <collection property="courses" resultMap="cst"/>
     </resultMap>
    <resultMap id="tttt" type="com.khw.studnet_grade.entity.Teacher">
        <id column="tno" property="tno" javaType="INTEGER" />
        <result column="tname" property="tname" jdbcType="VARCHAR" />
    </resultMap>
    <resultMap id="yyyy" type="com.khw.studnet_grade.entity.pojo.TeacherCourse">
        <id column="cno" property="cno" javaType="INTEGER" />
        <result column="cname" property="cname" jdbcType="VARCHAR"/>
        <collection property="teachers" resultMap="tttt"/>
    </resultMap>
    <resultMap id="selebycnobyscore" type="com.khw.studnet_grade.entity.pojo.CourseScore">
        <id column="cno" property="cno" javaType="INTEGER"/>
        <result column="cname" property="cname" jdbcType="VARCHAR"/>
        <collection property="studentSocreyis" resultMap="te"/>
    </resultMap>
    <resultMap id="te" type="com.khw.studnet_grade.entity.pojo.StudentSocreyi">
        <result column="sname" property="sname" jdbcType="VARCHAR"/>
        <result column="score" property="score" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="selectAlls" type="com.khw.studnet_grade.entity.pojo.StudentAll">
        <result column="sno" property="sno" javaType="INTEGER"/>
        <result column="sname" property="sname" jdbcType="VARCHAR"/>
        <collection property="courses" ofType="com.khw.studnet_grade.entity.pojo.CourseScoresTeacher" javaType="java.util.List" column="sno" select="queryTemplateById">
            <result column="cname" property="cname" jdbcType="VARCHAR" />
            <result column="score" property="score" jdbcType="VARCHAR" />
            <result column="tname" property="tname" jdbcType="VARCHAR" />
        </collection>
    </resultMap>
    <!-- 查询学生对应的成绩信息-->
    <select id="selectBysnoScores" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        SELECT student.sno sno,student.sname sname,score.score score,course.cname cname
        FROM student LEFT JOIN score on score.sno = student.sno
        LEFT JOIN course ON score.cno = course.cno
        HAVING student.sno=#{sno}
    </select>


<!--    根据老师的姓名查询该老师对应的老师和学生信息-->
    <select id="SelectTeacherBysname" resultMap="sso" parameterType="java.lang.String">
        select teacher.tno,teacher.tname,student.sno,student.sname
        from teacher LEFT JOIN course on
        teacher.tno = course.tno LEFT JOIN score on
        score.cno = course.cno
        LEFT JOIN student on
        student.sno = score.sno WHERE teacher.tname = #{tname}
    </select>


    <!--查询所有学生的所有成绩以及对应的老师-->
    <select id="selectAll" resultMap="AllStudent" >
    SELECT student.sno sno,student.sname sname,course.cname cname,score.score score,teacher.tname tname
    from student LEFT JOIN score
    on score.sno = student.sno
    LEFT JOIN teacher
    on teacher.tno = score.tno
    LEFT JOIN course
    on course.cno = score.cno
    ORDER BY student.sno
    </select>
<!--    查询所有人的平均成绩-->
    <select id="avgsCore" resultType="com.khw.studnet_grade.entity.pojo.AvgScore">
        select student.sname sname,round(AVG(score.score),2) avgs
        from student
        JOIN score
        on student.sno = score.sno
        group by sname;
    </select>
<!--    根据姓名该同学的平均成绩-->
    <select id="avgsBysname" parameterType="java.lang.String" resultType="com.khw.studnet_grade.entity.pojo.AvgScore">
        select student.sname,round(AVG(score.score),2) avgs
        from student
        LEFT JOIN score
        on student.sno = score.sno
        <where>
            student.sname = #{sname}
        </where>
    </select>
<!--    查询老师对应的课程的信息-->
    <select id="teachercourse" resultMap="yyyy">
        select teacher.tno tno,teacher.tname tname,course.cno cno,course.cname cname
        from teacher
        JOIN middle
        on teacher.tno = middle.tno
        JOIN course
        on middle.cno = course.cno
    </select>
<!--    老师表和课程表插入（老师）-->
    <insert id="insert" parameterType="com.khw.studnet_grade.entity.Teacher" useGeneratedKeys="true" keyProperty="tno">
        insert into teacher
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="tname != null" >
                tname,
            </if>
            <if test="age != null" >
                age,
            </if>
            <if test="sex != null" >
                sex,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="tname != null" >
                #{tname,jdbcType=VARCHAR},
            </if>
            <if test="age != null" >
                #{age,jdbcType=INTEGER},
            </if>
            <if test="sex != null" >
                #{sex,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <!--    老师表和课程表插入（课程）-->
    <insert id="insertTeacherMiddles" parameterType="com.khw.studnet_grade.entity.Middle">
        INSERT INTO middle
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="tno!=null">
                tno,
            </if>
            <if test="cno!=null">
                cno,
            </if>
        </trim>
        <trim prefix="values(" suffix=")" suffixOverrides=",">
            <if test="tno!=null">
                #{tno,jdbcType=INTEGER},
            </if>
            <if test="cno!=null">
                #{cno,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

<!--    根据学号录入每名学生的成绩（插入学生）-->
    <insert id="insertBycnoBytno" parameterType="com.khw.studnet_grade.entity.Score">
        insert into score
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="sno!=null">
                sno,
            </if>
            <if test="cno!=null">
                cno,
            </if>
            <if test="score!=null">
                score,
            </if>
            <if test="tno!=null">
                tno,
            </if>
        </trim>
        <trim prefix="values(" suffix=")" suffixOverrides=",">
            <if test="sno!=null">
                #{sno,jdbcType=INTEGER},
            </if>
            <if test="cno!=null">
                #{cno,jdbcType=INTEGER},
            </if>
            <if test="score!=null">
                #{score,jdbcType=VARCHAR},
            </if>
            <if test="tno!=null">
                #{tno,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
<!--    添加学生并且在添加学生的同时添加课程对应的成绩(学生)-->
    <insert id="insertBystudent" parameterType="com.khw.studnet_grade.entity.Student"  useGeneratedKeys="true" keyProperty="sno">
        insert into student
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="sname != null" >
                sname,
            </if>
            <if test="sage != null" >
                sage,
            </if>
            <if test="phone != null" >
                phone,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="sname != null" >
                #{sname,jdbcType=VARCHAR},
            </if>
            <if test="sage != null" >
                #{sage,jdbcType=VARCHAR},
            </if>
            <if test="phone != null" >
                #{phone,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <!--    添加学生并且在添加学生的同时添加课程对应的成绩(成绩)-->
    <insert id="inserByScore" parameterType="com.khw.studnet_grade.entity.Score">
        insert into score
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="sno != null" >
                sno,
            </if>
            <if test="cno != null" >
                cno,
            </if>
            <if test="score != null" >
                score,
            </if>
            <if test="tno != null" >
                tno,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="sno != null" >
                #{sno,jdbcType=INTEGER},
            </if>
            <if test="cno != null" >
                #{cno,jdbcType=INTEGER},
            </if>
            <if test="score != null" >
                #{score,jdbcType=VARCHAR},
            </if>
            <if test="tno != null" >
                #{tno,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

<!--    查询某门课程在某个分数段的学生信息-->
    <select id="selectBycnoByscore" parameterType="map" resultMap="selebycnobyscore">
    select score.cno,course.cname,student.sname,score.score
    from score
    JOIN student ON
    score.sno = student.sno
    JOIN course ON
    score.cno = course.cno
    WHERE score.cno=#{cno}
    and score.score BETWEEN #{min} AND #{max}
    </select>

<!--    分页查询-->
    <select id="selectAllpage" resultMap="selectAlls" >
    SELECT student.sno sno,student.sname sname
    from score JOIN student
    on score.sno = student.sno
    JOIN teacher
    on teacher.tno = score.tno
    JOIN course
    on course.cno = score.cno
    ORDER BY student.sno
    </select>
    <select id="queryTemplateById" resultType="com.khw.studnet_grade.entity.pojo.CourseScoresTeacher">
    SELECT  course.cname,score.score,teacher.tname
     from score JOIN student
    on score.sno = student.sno
    JOIN teacher
    on teacher.tno = score.tno
    JOIN course
    on course.cno = score.cno
    where student.sno = #{sno}
    ORDER BY student.sno
    </select>
<!--    修改老师的信息和对应的课程信息-->
    <update id="updateByteacher" parameterType="com.khw.studnet_grade.entity.Teacher" >
        update teacher
        <set >
            <if test="tname != null" >
                tname = #{tname,jdbcType=VARCHAR},
            </if>
            <if test="age != null" >
                age = #{age,jdbcType=INTEGER},
            </if>
            <if test="sex != null" >
                sex = #{sex,jdbcType=INTEGER},
            </if>
        </set>
        where tno = #{tno,jdbcType=INTEGER}
    </update>
    <update id="updateBymiddle" parameterType="com.khw.studnet_grade.entity.Middle">
        update middle
        <set >
            <if test="cno != null" >
                cno = #{cno,jdbcType=INTEGER},
            </if>
        </set>
        where tno = #{tno,jdbcType=INTEGER}
    </update>

<!--    修改学生的信息和对应课程的信息及课程对应老师的信息-->
    <update id="updateBystudent" parameterType="com.khw.studnet_grade.entity.Student">
        update student
        <set>
            <if test="sname!=null">
                sname = #{sname,jdbcType=VARCHAR},
            </if>
            <if test="sage!=null">
                sage = #{sage,jdbcType=VARCHAR},
            </if>
            <if test="phone!=null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
        </set>
        where sno = #{sno,jdbcType=INTEGER}
    </update>
    <update id="updateByscore" parameterType="com.khw.studnet_grade.entity.Score">
        update score
        <set>
            <if test="cno!=null">
                cno = #{cno,jdbcType=INTEGER},
            </if>
            <if test="score!=null">
                score = #{score,jdbcType=VARCHAR},
            </if>
            <if test="tno!=null">
                tno = #{tno,jdbcType=INTEGER},
            </if>
        </set>
        where sno = #{sno,jdbcType=INTEGER} and
        cno = #{cno,jdbcType=INTEGER}
    </update>

<!--    根据姓进行模糊查询查询学生的信息(采用concat（"拼接内容"）)-->
    <select id="selectLikeBysname" parameterType="string" resultType="com.khw.studnet_grade.entity.Student">
        select sno,sname,sage,phone
        from student
        where sname like concat(#{sname},'%')
    </select>
<!--    根据手机号进行模糊查询查询学生的信息(采用concat（"拼接内容"）)-->
    <select id="selectLikeByphone" parameterType="string" resultType="com.khw.studnet_grade.entity.Student">
        select sno,sname,sage,phone
        from student
        where phone like concat('%_______',#{phone})
    </select>
<!--    根据性别查询老师的信息-->
    <select id="selectBysex" resultType="com.khw.studnet_grade.entity.pojo.CourseTeacher" parameterType="integer">
        SELECT teacher.tname,teacher.age,teacher.sex,course.cname
        FROM teacher
        JOIN middle
        on teacher.tno = middle.tno
        JOIN course
        on course.cno = middle.cno
        WHERE teacher.sex = #{sex}
    </select>
<!--    模糊查询老师信息-->
    <select id="selectLikeBytname" resultType="com.khw.studnet_grade.entity.pojo.CourseTeacher" parameterType="string">
        SELECT teacher.tname,teacher.age,teacher.sex,course.cname
        FROM teacher
        JOIN middle
        on teacher.tno = middle.tno
        JOIN course
        on course.cno = middle.cno
        WHERE teacher.tname
        LIKE coucat('%',#{tname},'%')
    </select>
<!--根据学号和课程号实现一对一查询-->
    <select id="selectBysnoBycnoOne" parameterType="java.util.Map" resultType="com.khw.studnet_grade.entity.pojo.StudentMark">
        SELECT student.sno,student.sname,course.cname,score.score from score
        join student
        on student.sno = score.sno
        JOIN course
        on course.cno = score.cno
        <where>
            score.sno = #{sno}
            and score.cno=#{cno}
        </where>
    </select>
</mapper>
